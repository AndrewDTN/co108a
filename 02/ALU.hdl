// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //0orx
   Mux16(a=x,b[0..15]=false,sel=zx,out=ox);
   //!x or x
   Not16(in=ox,out=nnx);
   Mux16(a=ox,b=nnx,sel=nx,out=xn);
   //0ory
   Mux16(a=y,b[0..15]=false,sel=zy,out=oy);
   //!y or y
   Not16(in=oy,out=nny);
   Mux16(a=oy,b=nny,sel=ny,out=yn);
   //x+y or x*y
   Add16(a=xn,b=yn,out=xaddy);
   And16(a=xn,b=yn,out=xandy);
   Mux16(a=xandy,b=xaddy,sel=f,out=addorand);
   //no
   Not16(in=addorand,out=naddorand);
   Mux16(a=addorand,b=naddorand,sel=no,out[0..7]=res,out[8..14]=res2,out[15]=res3,out=out);
   //ng=0 out=else,ng=1 out<0
   And(a=res3,b=true,out=ng);
   //zr=0 out=else,zr=1 out=0
   Or8Way(in[0..7]=res,out=fir);
   Or8Way(in[0..6]=res2,in[7]=res3,out=sec);
   Or(a=fir,b=sec,out=yzr);
   Not(in=yzr,out=zr); 
}